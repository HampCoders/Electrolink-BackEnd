// <auto-generated />
using System;
using Hampcoders.Electrolink.API.Shared.Infrastructure.Persistence.EFC.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hampcoders.Electrolink.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("component_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("components", (string)null);
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.ComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("component_types", (string)null);
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.TechnicianInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("TechnicianId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TechnicianId")
                        .IsUnique();

                    b.ToTable("technician_inventories", (string)null);
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Entities.ComponentStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlertThreshold")
                        .HasColumnType("integer");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<Guid>("TechnicianInventoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("TechnicianInventoryId", "ComponentId")
                        .IsUnique();

                    b.ToTable("component_stocks", (string)null);
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.Component", b =>
                {
                    b.HasOne("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.ComponentType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.Property", b =>
                {
                    b.OwnsOne("Hampcoders.Electrolink.API.Assets.Domain.Model.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("address_country");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("numeric");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("address_street");

                            b1.HasKey("PropertyId");

                            b1.ToTable("properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsOne("Hampcoders.Electrolink.API.Assets.Domain.Model.ValueObjects.District", "District", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("district_name");

                            b1.Property<string>("Ubigeo")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("district_ubigeo");

                            b1.HasKey("PropertyId");

                            b1.ToTable("properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsOne("Hampcoders.Electrolink.API.Assets.Domain.Model.ValueObjects.PropertyPhoto", "Photo", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhotoURL")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("photo_url");

                            b1.HasKey("PropertyId");

                            b1.ToTable("properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.OwnsOne("Hampcoders.Electrolink.API.Assets.Domain.Model.ValueObjects.Region", "Region", b1 =>
                        {
                            b1.Property<Guid>("PropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("region_code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("region_name");

                            b1.HasKey("PropertyId");

                            b1.ToTable("properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("District")
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Region")
                        .IsRequired();
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Entities.ComponentStock", b =>
                {
                    b.HasOne("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.Component", null)
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.TechnicianInventory", null)
                        .WithMany("StockItems")
                        .HasForeignKey("TechnicianInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hampcoders.Electrolink.API.Assets.Domain.Model.Aggregates.TechnicianInventory", b =>
                {
                    b.Navigation("StockItems");
                });
#pragma warning restore 612, 618
        }
    }
}
